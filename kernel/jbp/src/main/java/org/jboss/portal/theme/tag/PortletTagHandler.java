/******************************************************************************
 * JBoss, a division of Red Hat                                               *
 * Copyright 2006, Red Hat Middleware, LLC, and individual                    *
 * contributors as indicated by the @authors tag. See the                     *
 * copyright.txt in the distribution for a full listing of                    *
 * individual contributors.                                                   *
 *                                                                            *
 * This is free software; you can redistribute it and/or modify it            *
 * under the terms of the GNU Lesser General Public License as                *
 * published by the Free Software Foundation; either version 2.1 of           *
 * the License, or (at your option) any later version.                        *
 *                                                                            *
 * This software is distributed in the hope that it will be useful,           *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU           *
 * Lesser General Public License for more details.                            *
 *                                                                            *
 * You should have received a copy of the GNU Lesser General Public           *
 * License along with this software; if not, write to the Free                *
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA         *
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.                   *
 ******************************************************************************/
package org.jboss.portal.theme.tag;

import org.jboss.logging.Logger;
import org.jboss.portal.common.NotYetImplemented;
import org.jboss.portal.theme.LayoutConstants;
import org.jboss.portal.theme.render.renderer.PageRendererContext;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.tagext.SimpleTagSupport;
import java.io.IOException;

/**
 * Tag handler for the portlet tag. <p>This tag adds the created markup of a Portlet to a page. The portlet tag utilizes
 * a render set to create the markup around the portlet. The render set takes care of the portlet window, hence it
 * creates the markup for the title, and the mode and state links. This tag does not initiate the call to the portlet
 * container, but rather is ment to assist in laying out the rendered markup, after it is generated by the portlet.
 * (place the already rendered markup of portlet x here....)</p>
 *
 * @author <a href="mailto:mholzner@novell.com">Martin Holzner</a>.
 * @version <tt>$Revision: 8784 $</tt>
 * @see org.jboss.portal.theme.PortalRenderSet
 */
public class PortletTagHandler extends SimpleTagSupport
{
   private static Logger log = Logger.getLogger(PortletTagHandler.class);
   private String windowName = null;

   /**
    * create the markup of this tag <p>Get a render set from the renderer factory, and call the window renderer to
    * generate the root container for this Portlet's markup. The window renderer then delegates to the decoration
    * renderer and the portlet renderer to create the markup for the title and the mode and state links, and to add the
    * Portlet's markup.</p>
    *
    * @throws javax.servlet.jsp.JspException
    * @throws java.io.IOException
    * @see org.jboss.portal.theme.PortalRenderSet#getWindowRenderer
    * @see org.jboss.portal.theme.render.renderer.WindowRenderer#render
    * @see org.jboss.portal.theme.render.renderer.PortletRenderer#render
    * @see org.jboss.portal.theme.render.renderer.DecorationRenderer#render
    */
   public void doTag() throws JspException, IOException
   {
      log.debug("rendering portlet " + windowName);


      JspWriter out = this.getJspContext().getOut();

      if (getWindowName() == null)
      {
         out.write("<p bgcolor='red'>No Portlet to render!</p>");
         out.write("<p bgcolor='red'>The Portlet to render must be set in the tag attribute '" +
            LayoutConstants.ATTR_PORTLET_WINDOW_NAME + "'</p>");
         out.flush();
         return;
      }

      PageContext app = (PageContext)getJspContext();
      HttpServletRequest request = (HttpServletRequest)app.getRequest();

      PageRendererContext page = (PageRendererContext)request.getAttribute(LayoutConstants.ATTR_PAGE);
      if (page == null)
      {
         out.write("<p bgcolor='red'>No page to render!</p>");
         out.write("<p bgcolor='red'>The page to render (PageResult) must be set in the request attribute '" +
            LayoutConstants.ATTR_PAGE + "'</p>");
         out.flush();
         return;
      }

//      String windowID = null;
//      boolean wIdFound = false;
//      //    we have the windowName (which is the window name), but we need the
//      //    window id
//      Map portletContexts = page.getWindowContextMap();
//      for (Iterator i = portletContexts.keySet().iterator(); i.hasNext();) {
//    	  windowID = (String) i.next();
//    	  WindowContext portletContext = (WindowContext) portletContexts
//    	  .get(windowID);
//    	  if (windowName.equals(portletContext.getWindowName())) {
//    		  wIdFound = true;
//    		  if (log.isDebugEnabled()) {
//    			  log.debug("found the portlet to render: " + windowName);
//    		  }
//    		  break;
//    	  }
//      }
//
//      if (!wIdFound) {
//    	  log
//    	  .warn("can't find the window id of the window name on this page. Page=["
//    			  + page.getPageName()
//    			  + "] and Window=["
//    			  + windowName
//    			  + "]. This window won't be shown in page.");
//    	  return;
//      }
//      if (page.getWindowContext(windowID) == null) {
//    	  log.warn("no such window on this page. Page [" + page.getPageName()
//    			  + "] Window name [" + windowName + "]" + "] Window Id ["
//    			  + windowID + "]");
//    	  return;
//      }
//
//      WindowContext windowContext = page.getWindowContext(windowID);
//      RenderContext renderContext = (RenderContext)request.getAttribute(LayoutConstants.ATTR_RENDERCONTEXT);
//
//      PageRenderContextImpl prc = new PageRenderContextImpl(page);
//      String regionName = windowContext.getRegionName();
//      Region region = page.getRegion(regionName);
//      RegionRenderContext rrc = new RegionRenderContextImpl(prc, region, null, null);
//      for (Iterator i = rrc.getWindowRenderContexts().iterator();i.hasNext();)
//      {
//         WindowRenderContext wrc = (WindowRenderContext)i.next();
//         if (wrc.getId().equals(windowContext.getId()))
//         {
//            try {
//               renderContext.render(wrc);
//               out.write(renderContext.getMarkupFragment().toString());
//               out.flush();
//            } catch (RenderException e) {
//               throw new JspException(e);
//            }
//            break;
//         }
//      }

      throw new NotYetImplemented();
   }

   public String getWindowName()
   {
      return windowName;
   }

   public void setWindowName(String portletWindowName)
   {
      if (log.isDebugEnabled())
      {
         log.debug("setting window name: " + portletWindowName);
      }
      this.windowName = portletWindowName;
   }
}

{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["Square","props","className","highlightWinSquares","onClick","updateStateOnClick","value","Board","highlightSquares","i","winningSquares","length","indexOf","generateRow","index","max","rows","push","renderSquare","generateBoard","columns","board","key","highlight","this","squares","React","Component","Game","initialize","history","Array","fill","location","col","row","active","moveNumber","xIsNext","stepNumber","toggle","state","reset","setState","jumpTo","step","forEach","item","handleClick","slice","Math","floor","calculateWinner","prevState","concat","toggleMoves","lines","a","b","c","status","win","player","filter","current","result","gameStatus","moves","map","move","desc","sort","reactContainerId","document","getElementById","getAttribute","console","log","ReactDOM","render"],"mappings":"+LAaeA,EAXA,SAAAC,GACb,OACE,4BACEC,UAAWD,EAAME,oBACjBC,QAASH,EAAMI,oBAEdJ,EAAMK,QCgEEC,G,iNAnEbC,iBAAmB,SAAAC,GACjB,OAAI,EAAKR,MAAMS,eAAeC,OAAS,GACjC,EAAKV,MAAMS,eAAeE,QAAQH,IAAM,EACnC,wBAKF,U,EAgBXI,YAAc,SAACC,EAAOC,GAGpB,IAFA,IAAIC,EAAO,GAECF,EAAQC,EAAKD,IACvBE,EAAKC,KAAK,EAAKC,aAAaJ,IAE9B,OAAOE,G,EAGTG,cAAgB,SAACC,EAASJ,GAMxB,IALA,IAAIK,EAAQ,GAKHZ,EAAI,EAAGA,EAAIW,EAAUJ,EAAMP,IAQ9BA,EAAIW,IAAY,GAClBC,EAAMJ,KACJ,yBAAKf,UAAU,YAAYoB,IAAKb,GAC7B,EAAKI,YAAYJ,EAAGA,EAAIW,KAKjC,OAAOC,G,2DA3CIZ,GAAI,IAAD,OACVc,EAAYC,KAAKhB,iBAAiBC,GACtC,OACE,kBAAC,EAAD,CACEa,IAAKb,EACLN,oBAAqBoB,EACrBjB,MAAOkB,KAAKvB,MAAMwB,QAAQhB,GAC1BJ,mBAAoB,kBAAM,EAAKJ,MAAMG,QAAQK,Q,+BAwCjD,OACE,6BACE,6BAAMe,KAAKL,cAAc,EAAG,S,GA9DhBO,IAAMC,YCuOXC,E,4MAnObC,WAAa,WACX,MAAO,CACLC,QAAS,CACP,CACEL,QAASM,MAAM,GAAGC,KAAK,MACvBC,SAAU,CACRC,IAAK,EACLC,IAAK,GAEPC,QAAQ,EACRC,WAAY,IAGhBC,SAAS,EACTC,WAAY,EACZC,QAAQ,I,EAIZC,MAAQ,EAAKZ,a,EAEba,MAAQ,WACN,EAAKC,SAAS,EAAKd,e,EAGrBe,OAAS,SAAAC,GACP,IAAIf,EAAU,EAAKW,MAAMX,QAEzBA,EAAQgB,SAAQ,SAAAC,GACdA,EAAKX,QAAS,KAGhBN,EAAQe,GAAMT,QAAS,EACvB,EAAKO,SAAS,CACZb,QAASA,EACTS,WAAYM,EACZP,QAASO,EAAO,IAAM,K,EAI1BG,YAAc,SAAAvC,GAWZ,IAAMqB,EAAU,EAAKW,MAAMX,QAAQmB,MAAM,EAAG,EAAKR,MAAMF,WAAa,GAE9Dd,EADUK,EAAQA,EAAQnB,OAAS,GACjBc,QAAQwB,QAM1Bf,EAAMgB,KAAKC,MAAM1C,EALP,GAKsB,EAChC0B,EAAMe,KAAKC,MAAM1C,EANP,GAMsB,EAElC,EAAK2C,gBAAgB3B,IAAYA,EAAQhB,KAI7CgB,EAAQhB,GAAK,EAAKgC,MAAMH,QAAU,IAAM,IAMxC,EAAKK,UAAS,SAAAU,GAAS,MAAK,CAC1BvB,QAASA,EAAQwB,OAAO,CACtB,CACE7B,QAASA,EACTQ,SAAU,CACRC,IAAKA,EACLC,IAAKA,GAEPC,QAAQ,EACRC,WAAYP,EAAQnB,UAGxB2B,SAAUe,EAAUf,QACpBC,WAAYT,EAAQnB,a,EAIxB4C,YAAc,WACZ,IAAMf,GAAU,EAAKC,MAAMD,OAC3B,EAAKG,SAAS,CACZH,OAAQA,K,EAIZY,gBAAkB,SAAC3B,GAejB,IAdA,IAAM+B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAMA/C,EAAI,EAAGA,EAAI+C,EAAM7C,OAAQF,IAAK,CAAC,IAAD,cACnB+C,EAAM/C,GADa,GAC9BgD,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GACElC,EAAQgC,IACRhC,EAAQgC,KAAOhC,EAAQiC,IACvBjC,EAAQgC,KAAOhC,EAAQkC,GAMvB,MAJS,CACPC,OAAQ,MACRC,IAAK,CAAEC,OAAQrC,EAAQgC,GAAIhC,QAAS,CAACgC,EAAGC,EAAGC,KAMjD,OAAsB,IADTlC,EAAQsC,QAAO,SAAAhB,GAAI,OAAa,OAATA,KACzBpC,OACA,CAAEiD,OAAQ,OAAQC,IAAK,IAG3B,M,uDAGC,IAwCJD,EAxCG,OACD9B,EAAUN,KAAKiB,MAAMX,QACrBkC,EAAUlC,EAAQN,KAAKiB,MAAMF,YAC7B0B,EAASzC,KAAK4B,gBAAgBY,EAAQvC,SACtCyC,EAAaD,GAAUA,EAAOL,OAASK,EAAOL,OAAS,KAEvDO,EAAQrC,EAAQsC,KAAI,SAACC,EAAMvD,GAC/B,IAAMwD,EAAOxD,EAAQ,eAAiBA,EAAQ,mBAE1CsB,EAAS,GAMb,OAJEA,EADEiC,EAAKjC,OACE,SAEA,SAGT,wBAAId,IAAKR,GACP,4BACEZ,UAAWkC,EACXd,IAAG,UAAK+C,EAAKpC,SAASC,IAAnB,YAA0BmC,EAAKpC,SAASE,KAC3C/B,QAAS,kBAAM,EAAKwC,OAAO9B,KAH7B,UAKMwD,EALN,aAKeD,EAAKpC,SAASC,IAL7B,aAKqCmC,EAAKpC,SAASE,IALnD,UA8BN,OAfAgC,EAAMI,MAAK,SAACd,EAAGC,GACb,OAAI,EAAKjB,MAAMD,OACNkB,EAAEpC,IAAMmC,EAAEnC,IAEVmC,EAAEnC,IAAMoC,EAAEpC,OAOnBsC,EADiB,QAAfM,EACI,kBAAcD,EAAOJ,IAAIC,QAEtB,iBAAmBtC,KAAKiB,MAAMH,QAAU,IAAM,KAGvD,yBAAKpC,UAAU,QAGE,SAAfgE,EACE,yBAAKhE,UAAU,QACb,qCACA,4BAAQE,QAAS,kBAAM,EAAKsC,UAA5B,eAIF,yBAAKxC,UAAU,cACb,kBAAC,EAAD,CACEuB,QAASuC,EAAQvC,QACjBf,eAA+B,QAAfwD,EAAuBD,EAAOJ,IAAIpC,QAAU,GAC5DrB,QAAS,SAACK,EAAGyB,EAAKC,GAAT,OAAiB,EAAKa,YAAYvC,EAAGyB,EAAKC,MAItC,QAAf+B,EACE,yBAAKhE,UAAU,OACb,uCAAS+D,EAAOJ,IAAIC,OAApB,iBACA,4BAAQ1D,QAAS,kBAAM,EAAKsC,UAA5B,eAGF,yBAAKxC,UAAU,SACb,4BAAQE,QAAS,kBAAM,EAAKsC,UAA5B,gBAMR,yBAAKxC,UAAU,aACb,6BAAM0D,GAEN9B,EAAQnB,OAAS,EACf,4BAAQP,QAAS,kBAAM,EAAKmD,gBAA5B,gBAEA,GAEF,4BAAKY,S,GAhOIzC,IAAMC,WCErB6C,EADwBC,SAASC,eAAe,2BACTC,aAAa,qBAExDC,QAAQC,IAAI,sBAAwBL,GACpCI,QAAQC,IAAI,oBAAsBJ,SAASC,eAAeF,IAE1DM,IAASC,OAAO,kBAAC,EAAD,MAAUN,SAASC,eAAeF,K","file":"static/js/main.0b89752d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Square = props => {\r\n  return (\r\n    <button\r\n      className={props.highlightWinSquares}\r\n      onClick={props.updateStateOnClick}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\nimport \"../index.css\";\r\n\r\nclass Board extends React.Component {\r\n  highlightSquares = i => {\r\n    if (this.props.winningSquares.length > 0) {\r\n      if (this.props.winningSquares.indexOf(i) > -1) {\r\n        return \"square winningSquares\";\r\n      } else {\r\n        return \"square\";\r\n      }\r\n    } else {\r\n      return \"square\";\r\n    }\r\n  };\r\n\r\n  renderSquare(i) {\r\n    let highlight = this.highlightSquares(i);\r\n    return (\r\n      <Square\r\n        key={i}\r\n        highlightWinSquares={highlight}\r\n        value={this.props.squares[i]}\r\n        updateStateOnClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  generateRow = (index, max) => {\r\n    let rows = [];\r\n\r\n    for (index; index < max; index++) {\r\n      rows.push(this.renderSquare(index));\r\n    }\r\n    return rows;\r\n  };\r\n\r\n  generateBoard = (columns, rows) => {\r\n    let board = [];\r\n\r\n    /**\r\n     * Generate (col * row, here, 3 * 3 = 9) squares\r\n     */\r\n    for (let i = 0; i < columns * rows; i++) {\r\n      /**\r\n       * Generate columns.\r\n       *\r\n       * Only allow multiples of \"number of columns\".\r\n       * For example, if number of columns is 3, then,\r\n       * 3, 6, 9.\r\n       */\r\n      if (i % columns === 0) {\r\n        board.push(\r\n          <div className=\"board-row\" key={i}>\r\n            {this.generateRow(i, i + columns)}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return board;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>{this.generateBoard(3, 3)}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport \"../index.css\";\r\n\r\nclass Game extends React.Component {\r\n  /**\r\n   * Initial state of the game\r\n   */\r\n  initialize = () => {\r\n    return {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n          location: {\r\n            col: 0,\r\n            row: 0\r\n          },\r\n          active: false,\r\n          moveNumber: 0\r\n        }\r\n      ],\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n      toggle: false\r\n    };\r\n  };\r\n\r\n  state = this.initialize();\r\n\r\n  reset = () => {\r\n    this.setState(this.initialize());\r\n  };\r\n\r\n  jumpTo = step => {\r\n    let history = this.state.history;\r\n\r\n    history.forEach(item => {\r\n      item.active = false;\r\n    });\r\n\r\n    history[step].active = true;\r\n    this.setState({\r\n      history: history,\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0\r\n    });\r\n  };\r\n\r\n  handleClick = i => {\r\n    /**\r\n     * If we jumped to some previous step, and then make\r\n     * a new move from that point, we throw away all \"future\"\r\n     * history that will now become irrelevant.\r\n     *\r\n     * slice(startingPoint, endPoint)\r\n     *\r\n     * startingPoint - Array index from where the \"slicing\" starts.\r\n     * endPoint - All array indices less than endPoint will be included in \"slicing\"\r\n     */\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    const columns = 3;\r\n\r\n    /**\r\n     * Calculate location of square when clicked\r\n     */\r\n    const col = Math.floor(i % columns) + 1;\r\n    const row = Math.floor(i / columns) + 1;\r\n\r\n    if (this.calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n\r\n    /**\r\n     * concat() method does not mutate the Array\r\n     * unlike Array.push().\r\n     */\r\n    this.setState(prevState => ({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          location: {\r\n            col: col,\r\n            row: row\r\n          },\r\n          active: false,\r\n          moveNumber: history.length\r\n        }\r\n      ]),\r\n      xIsNext: !prevState.xIsNext,\r\n      stepNumber: history.length\r\n    }));\r\n  };\r\n\r\n  toggleMoves = () => {\r\n    const toggle = !this.state.toggle;\r\n    this.setState({\r\n      toggle: toggle\r\n    });\r\n  };\r\n\r\n  calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    let result = {\r\n      status: \"\",\r\n      win: {}\r\n    };\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        result = {\r\n          status: \"win\",\r\n          win: { player: squares[a], squares: [a, b, c] }\r\n        };\r\n        return result;\r\n      }\r\n    }\r\n    let tempSq = squares.filter(item => item === null);\r\n    if (tempSq.length === 0) {\r\n      result = { status: \"draw\", win: {} };\r\n      return result;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const result = this.calculateWinner(current.squares);\r\n    const gameStatus = result && result.status ? result.status : null;\r\n\r\n    const moves = history.map((move, index) => {\r\n      const desc = index ? \"Go to move #\" + index : \"Go to game start\";\r\n\r\n      let active = \"\";\r\n      if (move.active) {\r\n        active = \"active\";\r\n      } else {\r\n        active = \"normal\";\r\n      }\r\n      return (\r\n        <li key={index}>\r\n          <button\r\n            className={active}\r\n            key={`${move.location.col}_${move.location.row}`}\r\n            onClick={() => this.jumpTo(index)}\r\n          >\r\n            {`${desc} (${move.location.col}, ${move.location.row})`}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    /**\r\n     * If this.state.toggle is \"true\", sort in\r\n     * \"decending order\" and vice versa.\r\n     */\r\n    moves.sort((a, b) => {\r\n      if (this.state.toggle) {\r\n        return b.key - a.key;\r\n      } else {\r\n        return a.key - b.key;\r\n      }\r\n    });\r\n\r\n    let status;\r\n\r\n    if (gameStatus === \"win\") {\r\n      status = `Winner: ${result.win.player}`;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        {/** If there is a draw, hide the game board and show \r\n          \"Play again\" button */\r\n        gameStatus === \"draw\" ? (\r\n          <div className=\"draw\">\r\n            <h2>Draw!</h2>\r\n            <button onClick={() => this.reset()}>Play again</button>\r\n          </div>\r\n        ) : (\r\n          /** Otherwise, show the game board */\r\n          <div className=\"game-board\">\r\n            <Board\r\n              squares={current.squares}\r\n              winningSquares={gameStatus === \"win\" ? result.win.squares : []}\r\n              onClick={(i, col, row) => this.handleClick(i, col, row)}\r\n            />\r\n            {/** Depending upon the state of the game, either show \r\n              \"Play again\" button or \"Reset game\" button */\r\n            gameStatus === \"win\" ? (\r\n              <div className=\"win\">\r\n                <h2>{`\"${result.win.player}\" is winner!`}</h2>\r\n                <button onClick={() => this.reset()}>Play again</button>\r\n              </div>\r\n            ) : (\r\n              <div className=\"reset\">\r\n                <button onClick={() => this.reset()}>Reset game</button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          {/** Show the toggle button only if there are two or more moves to sort */\r\n          history.length > 1 ? (\r\n            <button onClick={() => this.toggleMoves()}>Toggle moves</button>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Game from \"./components/Game\";\r\n\r\n\r\nvar reactContainerFactory = document.getElementById(\"react-container-factory\");\r\nvar reactContainerId=reactContainerFactory.getAttribute(\"current-container\");\r\n\r\nconsole.log(\" reactContainerId =\" + reactContainerId);\r\nconsole.log(\" reactContainer =\" + document.getElementById(reactContainerId));\r\n\r\nReactDOM.render(<Game />, document.getElementById(reactContainerId));\r\n\r\n"],"sourceRoot":""}